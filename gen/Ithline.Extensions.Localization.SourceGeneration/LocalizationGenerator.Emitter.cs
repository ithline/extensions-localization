using System.Text;
using Ithline.Extensions.Localization.SourceGeneration.Specs;
using Microsoft.CodeAnalysis;

namespace Ithline.Extensions.Localization.SourceGeneration;

public sealed partial class LocalizationGenerator
{
    private sealed class Emitter
    {
        private readonly SourceGenerationSpec _spec;
        private readonly SourceWriter _writer = new();
        private readonly StringBuilder _sb = new(1024);

        public Emitter(SourceGenerationSpec spec)
        {
            _spec = spec;
        }

        public void Emit(SourceProductionContext ctx)
        {
            if (_spec.Types.Count == 0)
            {
                return;
            }

            _writer.WriteLine("""
                // <auto-generated/>

                #nullable enable annotations
                #nullable disable warnings

                // Suppress warnings about [Obsolete] member usage in generated code.
                #pragma warning disable CS0612, CS0618
                """);

            var first = true;
            foreach (var rootType in _spec.Types)
            {
                if (!first)
                {
                    _writer.WriteLine();
                }
                first = false;

                _writer.EmitStartBlock($"namespace {rootType.Namespace}");
                this.EmitType(rootType);
                _writer.EmitEndBlock();
            }

            ctx.AddSource("LocalizedStringExtensions.g.cs", _writer.ToSourceText());
        }

        private void EmitType(TypeSpec spec)
        {
            _writer.EmitStartBlock($"partial {spec.Keyword} {spec.TypeName}");

            var first = true;
            foreach (var method in spec.Methods ?? [])
            {
                if (!first)
                {
                    _writer.WriteLine();
                }
                first = false;

                this.EmitMethod(method, spec);
            }

            foreach (var type in spec.Types ?? [])
            {
                if (!first)
                {
                    _writer.WriteLine();
                }
                first = false;

                this.EmitType(type);
            }

            _writer.EmitEndBlock();
        }

        private void EmitMethod(MethodSpec spec, TypeSpec type)
        {
            var constant = GenerateConstant(_sb, spec);
            var signature = GenerateSignature(_sb, spec, out var localizerParameter);
            var body = GenerateBody(_sb, spec, type, localizerParameter);

            _writer.WriteLine(constant);
            _writer.EmitStartBlock(signature);
            _writer.WriteLine(body);
            _writer.EmitEndBlock();

            static string GenerateConstant(StringBuilder sb, MethodSpec spec)
            {
                sb.Append("public const string _");
                sb.Append(spec.Name);
                sb.Append(" = \"");
                sb.Append(spec.ResourceId);
                sb.Append("\";");
                return sb.ToStringAndClear();
            }

            static string GenerateSignature(StringBuilder sb, MethodSpec spec, out MethodParameterSpec? localizerParameter)
            {
                localizerParameter = null;

                if (!string.IsNullOrWhiteSpace(spec.Modifiers))
                {
                    sb.Append(spec.Modifiers).Append(" ");
                }
                sb.Append(spec.ReturnType.FullyQualifiedName);
                sb.Append(" ");
                sb.Append(spec.Name);
                sb.Append(spec.IsExtensionMethod ? "(this " : "(");

                var first = true;
                foreach (var p in spec.Parameters)
                {
                    if (!first)
                    {
                        sb.Append(", ");
                    }
                    first = false;

                    sb.Append(p.Type.FullyQualifiedName);
                    sb.Append(" ");
                    sb.Append(p.Name);

                    if (p.IsLocalizer)
                    {
                        localizerParameter = p;
                    }
                }
                sb.Append(")");

                return sb.ToStringAndClear();
            }

            static string GenerateBody(StringBuilder sb, MethodSpec spec, TypeSpec type, MethodParameterSpec? localizerParameter)
            {
                sb.Append("return ");
                if (localizerParameter is not null)
                {
                    sb.Append(localizerParameter.Name);
                }
                else
                {
                    sb.Append("this.");
                    sb.Append(type.LocalizerField);
                }
                sb.Append("[");
                sb.Append($"\"{spec.ResourceId}\"");
                foreach (var p in spec.Parameters)
                {
                    if (p.IsLocalizer)
                    {
                        continue;
                    }

                    sb.Append(", ");
                    sb.Append(p.Name);
                }
                sb.Append("];");

                return sb.ToStringAndClear();
            }
        }
    }

}

